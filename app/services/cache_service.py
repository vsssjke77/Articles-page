from app.database.redis_client import redis_client
from app.crud.article import get_article_by_id


class CacheService:
    @staticmethod
    async def get_article_with_cache(article_id: int, db):
        print(f"üîç CacheService: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ {article_id}")

        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫—ç—à–∞
        cached_content = await redis_client.get_article_content(article_id)
        if cached_content:
            print(f"‚úÖ –°—Ç–∞—Ç—å—è {article_id} –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫—ç—à–µ")
            return cached_content.decode('utf-8')

        print(f"‚ùå –°—Ç–∞—Ç—å—è {article_id} –Ω–µ –≤ –∫—ç—à–µ, –ø–æ–ª—É—á–∞–µ–º –∏–∑ –ë–î")

        # –ï—Å–ª–∏ –Ω–µ—Ç –≤ –∫—ç—à–µ, –ø–æ–ª—É—á–∞–µ–º –∏–∑ –ë–î –∏ –∫—ç—à–∏—Ä—É–µ–º
        article = await get_article_by_id(db, article_id)
        if article:
            print(f"üíæ –ö—ç—à–∏—Ä—É–µ–º —Å—Ç–∞—Ç—å—é {article_id} –Ω–∞ 20 —Å–µ–∫—É–Ω–¥")
            await redis_client.set_article_content(article_id, article.content)
            return article.content

        print(f"‚ùå –°—Ç–∞—Ç—å—è {article_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î")
        return None


cache_service = CacheService()