import asyncio
import aiohttp
import random
from faker import Faker
import json

fake = Faker()

API_BASE_URL = "http://localhost:8000"


async def register_user(session, username, email, password):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API"""
    user_data = {
        "username": username,
        "email": email,
        "password": password
    }

    try:
        async with session.post(f"{API_BASE_URL}/auth/register", json=user_data) as response:
            if response.status == 200:
                user = await response.json()
                print(f"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user['username']}")
                return user
            else:
                error = await response.text()
                print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ {username}: {error}")
                return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è {username}: {e}")
        return None


async def login_user(session, username, password):
    """–õ–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API"""
    form_data = {
        "username": username,
        "password": password
    }

    try:
        async with session.post(f"{API_BASE_URL}/auth/login", data=form_data) as response:
            if response.status == 200:
                tokens = await response.json()
                return tokens["access_token"]
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏–Ω–∞ {username}")
                return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏–Ω–∞ –¥–ª—è {username}: {e}")
        return None


async def create_article(session, token, title, content):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ —á–µ—Ä–µ–∑ API"""
    article_data = {
        "title": title,
        "content": content
    }

    headers = {"Authorization": f"Bearer {token}"}

    try:
        async with session.post(f"{API_BASE_URL}/articles/", json=article_data, headers=headers) as response:
            if response.status == 200:
                article = await response.json()
                return article
            else:
                error = await response.text()
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞—Ç—å–∏: {error}")
                return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞—Ç—å–∏: {e}")
        return None


async def init_test_data():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ API"""
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ API...")

    async with aiohttp.ClientSession() as session:
        users = []

        # –°–æ–∑–¥–∞–µ–º 20 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        print("üîÑ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        for i in range(20):
            username = f"user_{i}_{fake.user_name()}"
            email = f"user_{i}_{fake.email()}"
            password = "password123"

            user = await register_user(session, username, email, password)
            if user:
                users.append({
                    "id": user["id"],
                    "username": username,
                    "password": password
                })

        print(f"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

        # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç—å–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print("üîÑ –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç—å–∏...")
        total_articles = 0

        for user in users:
            # –õ–æ–≥–∏–Ω–∏–º—Å—è –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            token = await login_user(session, user["username"], user["password"])

            if token:
                articles_created = 0
                for j in range(50):  # –ü–æ 50 —Å—Ç–∞—Ç–µ–π –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    title = fake.sentence()
                    content = fake.text(1000)  # –î–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç

                    article = await create_article(session, token, title, content)
                    if article:
                        articles_created += 1
                        total_articles += 1

                print(f"üìù –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user['username']} —Å–æ–∑–¥–∞–ª {articles_created} —Å—Ç–∞—Ç–µ–π")
            else:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –∫–∞–∫ {user['username']}")

        print(f"üéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print(f"üìä –ò—Ç–æ–≥: {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, {total_articles} —Å—Ç–∞—Ç–µ–π")




async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ...")

    await init_test_data()


if __name__ == "__main__":
    asyncio.run(main())